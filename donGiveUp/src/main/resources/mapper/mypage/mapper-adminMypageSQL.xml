<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="adminMypage">
	<select id="selectboardRequestListTotalCount" parameterType="map" resultType="_int">
		<if test='type.equals("all")'><!--전체 탭-->
			<if test='req.equals("") || req.equals("null")'> <!-- 사용자가 신청대기목록을 선택한 경우 -->
				select SUM(cnt) from
				(
				select count(*) as cnt from donation where
					donation_title like '%'||#{title}||'%'
				union all
					select count(*) as cnt from funding where
					funding_title like '%'||#{title}||'%'
				union all
					select count(*) as cnt from support where
					support_name like '%'||#{title}||'%'
				union all
					select count(*) as cnt from vwork where
					vwork_title like '%'||#{title}||'%'

				union all
					select count(*) as cnt from regular where
					regular_title like '%'||#{title}||'%'

				)
			</if>
			<if test='req.equals("wait")'> <!-- 사용자가 신청대기목록을 선택한 경우 -->
				select SUM(cnt) from
				(
				select count(*) as cnt from donation where
					donation_title like '%'||#{title}||'%' and donation_state=0
				union all
					select count(*) as cnt from funding where
					funding_title like '%'||#{title}||'%' and funding_type=0
				union all
					select count(*) as cnt from support where
					support_name like '%'||#{title}||'%' and support_state=0
				union all
					select count(*) as cnt from vwork where
					vwork_title like '%'||#{title}||'%' and vwork_state=0

				union all
					select count(*) as cnt from regular where
					regular_title like '%'||#{title}||'%' and regular_state=0

				)
			</if>
			<if test='req.equals("complete")'> <!-- 사용자가 처리완료목록 선택한 경우 -->
				select SUM(cnt) from
				(
				select count(*) as cnt from donation where
					donation_title like '%'||#{title}||'%' and donation_state!=0
				union all
					select count(*) as cnt from funding where
					funding_title like '%'||#{title}||'%' and funding_type!=0
				union all
					select count(*) as cnt from support where
					support_name like '%'||#{title}||'%' and support_state!=0
				union all
					select count(*) as cnt from vwork where
					vwork_title like '%'||#{title}||'%' and vwork_state!=0

				union all
					select count(*) as cnt from regular where
					regular_title like '%'||#{title}||'%' and regular_state!=0

				)
			</if>
		</if>
	</select>
	
	<select id="selectboardRequestList" parameterType="map" resultType="adminRequestBoard">
		<if test='type.equals("all")'><!--전체 탭-->
			<if test='req.equals("") || req.equals("null")'> <!-- 사용자가 신청대기목록을 선택한 경우 -->
				select * from (select rownum as boardNo,rr.* from (
				    select  r.* , member_phone as memberPhone, member_email as memberEmail from(
				        select donation_no as boardKey,'기부' as groupName, donation_title as boardTitle, donation_writer as boardWriter, donation_start_date as startDate, donation_state as  boardState from donation
				        union all
				        select funding_no, '펀딩', funding_title, funding_manager, funding_start_date, funding_type from funding 
				        union all
				        select support_no, '물품후원', support_name, support_id, enroll_start_date, support_state from support
				        union all
				        select vwork_no, '함께해요', vwork_title, vwork_writer, vwork_req_date, vwork_state from vwork

				        union all
				        select regular_no, '정기후원', regular_title, regular_id, regular_start_date, regular_state from regular

				    )r left join member on (r.boardWriter=member_id) where boardTitle like '%'||#{title}||'%' 
				    <if test='sort.equals("date")'> <!--정렬 선택에 따름. -->
					     order by startDate
				    </if>
				    <if test='sort.equals("title")'>
					     order by boardTitle
				    </if>
				)rr) where boardNo between  #{start} and #{end}
			</if>
			<if test='req.equals("wait")'> <!-- 사용자가 신청대기목록을 선택한 경우 -->
				select * from (select rownum as boardNo,rr.* from (
				    select  r.* , member_phone as memberPhone, member_email as memberEmail from(
				        select donation_no as boardKey,'기부' as groupName, donation_title as boardTitle, donation_writer as boardWriter, donation_start_date as startDate, donation_state as  boardState from donation
				        union all
				        select funding_no, '펀딩', funding_title, funding_manager, funding_start_date, funding_type from funding 
				        union all
				        select support_no, '물품후원', support_name, support_id, enroll_start_date, support_state from support
				        union all
				        select vwork_no, '함께해요', vwork_title, vwork_writer, vwork_req_date, vwork_state from vwork

				        union all
				        select regular_no, '정기후원', regular_title, regular_id, regular_start_date, regular_state from regular

				    )r left join member on (r.boardWriter=member_id) where boardState=0 and boardTitle like '%'||#{title}||'%' 
				    <if test='sort.equals("date")'> <!--정렬 선택에 따름. -->
					     order by startDate
				    </if>
				    <if test='sort.equals("title")'>
					     order by boardTitle
				    </if>
				)rr) where boardNo between  #{start} and #{end}
			</if>
			<if test='req.equals("complete")'> <!-- 사용자가 처리완료목록 선택한 경우 -->
				select * from (select rownum as boardNo,rr.* from (
				    select  r.* , member_phone as memberPhone, member_email as memberEmail from(
				        select donation_no as boardKey,'기부' as groupName, donation_title as boardTitle, donation_writer as boardWriter, donation_start_date as startDate, donation_state as  boardState from donation
				        union all
				        select funding_no, '펀딩', funding_title, funding_manager, funding_start_date, funding_type from funding 
				        union all
				        select support_no, '물품후원', support_name, support_id, enroll_start_date, support_state from support
				        union all
				        select vwork_no, '함께해요', vwork_title, vwork_writer, vwork_req_date, vwork_state from vwork

				        union all
				        select regular_no, '정기후원', regular_title, regular_id, regular_start_date, regular_state from regular

				    )r left join member on (r.boardWriter=member_id) where boardState!=0 and boardTitle like '%'||#{title}||'%' 
				    <if test='sort.equals("date")'> <!--정렬 선택에 따름. -->
					     order by startDate
				    </if>
				    <if test='sort.equals("title")'>
					     order by boardTitle
				    </if>
				)rr) where boardNo between  #{start} and #{end}
			</if>
		</if>
	</select>
	
	<select id="selectboardRequestListTotalCountEtc" parameterType="map" resultType="_int">
		<if test='type.equals("donation")'>
			select count(*) as cnt from donation where donation_title like '%'||#{title}||'%'
			<if test='req.equals("wait")'>
				and donation_state = 0
			</if>
			<if test='req.equals("complete")'>
				and donation_state != 0
			</if>
		</if>
		<if test='type.equals("funding")'>
			select count(*) as cnt from funding where funding_title like '%'||#{title}||'%'
			<if test='req.equals("wait")'>
				and funding_type = 0
			</if>
			<if test='req.equals("complete")'>
				and funding_type != 0
			</if>
		</if>
		<if test='type.equals("vwork")'>
			select count(*) as cnt from vwork where vwork_title like '%'||#{title}||'%'
			<if test='req.equals("wait")'>
				and vwork_state = 0
			</if>
			<if test='req.equals("complete")'>
				and vwork_state != 0
			</if>
		</if>
		<if test='type.equals("support")'>
			select count(*) as cnt from support where support_name like '%'||#{title}||'%'
			<if test='req.equals("wait")'>
				and support_state = 0
			</if>
			<if test='req.equals("complete")'>
				and support_state != 0
			</if>
		</if>
		<if test='type.equals("regular")'>
			select count(*) as cnt from regular where regular_title like '%'||#{title}||'%'
			<if test='req.equals("wait")'>
				and regular_state = 0
			</if>
			<if test='req.equals("complete")'>
				and regular_state != 0

			</if>
		</if>
	</select>
	
	<select id="selectboardRequestListEtc" parameterType="map" resultType="adminRequestBoard">
		<if test='type.equals("donation")'>
			select * from 
			    (select ROWNUM as boardNo, rr.* from
			        (select  r.* from
			            (select donation_no as boardKey,'기부' as groupName, donation_title as boardTitle, donation_writer as boardWriter, donation_start_date as startDate,
			             donation_state as boardState, member_phone as memberPhone, member_email as memberEmail from donation left join member on(member_id=donation_writer)
			             )r where boardTitle like '%'||#{title}||'%'
			             <if test='req.equals("wait")'>
					     	and boardState=0
					     </if>
					     <if test='req.equals("complete")'>
					    	and boardState!=0
					     </if>
					     <if test='sort.equals("date")'>
					     	order by startDate
					     </if>
					     <if test='sort.equals("title")'>
					     	order by boardTitle
					     </if>
			         )rr
			    )
			where boardNo between #{start} and #{end}
		</if>
		<if test='type.equals("funding")'>
			select * from 
			    (select ROWNUM as boardNo, rr.* from
			        (select  r.* from
			            (select funding_no as boardKey,'펀딩' as groupName, funding_title as boardTitle, funding_manager as boardWriter, funding_start_date as startDate,
			             funding_type as boardState, member_phone as memberPhone, member_email as memberEmail from funding left join member on(member_id=funding_manager)
			             )r where boardTitle like '%'||#{title}||'%'
			             <if test='req.equals("wait")'>
					     	and boardState=0
					     </if>
					     <if test='req.equals("complete")'>
					    	and boardState!=0
					     </if>
					     <if test='sort.equals("date")'>
					     	order by startDate
					     </if>
					     <if test='sort.equals("title")'>
					     	order by boardTitle
					     </if>
			         )rr
			    )
			where boardNo between #{start} and #{end}
		</if>
		<if test='type.equals("vwork")'>
			select * from 
			    (select ROWNUM as boardNo, rr.* from
			        (select  r.* from
			            (select vwork_no as boardKey,'함께해요' as groupName, vwork_title as boardTitle, vwork_writer as boardWriter, vwork_req_date as startDate,
			             vwork_state as boardState, member_phone as memberPhone, member_email as memberEmail from vwork left join member on(member_id=vwork_writer)
			             )r where boardTitle like '%'||#{title}||'%'
			             <if test='req.equals("wait")'>
					     	and boardState=0
					     </if>
					     <if test='req.equals("complete")'>
					    	and boardState!=0
					     </if>
					     <if test='sort.equals("date")'>
					     	order by startDate
					     </if>
					     <if test='sort.equals("title")'>
					     	order by boardTitle
					     </if>
			         )rr
			    )
			where boardNo between #{start} and #{end}
		</if>
		<if test='type.equals("support")'>
			select * from 
			    (select ROWNUM as boardNo, rr.* from
			        (select  r.* from
			            (select support_no as boardKey,'물품후원' as groupName, support_name as boardTitle, support_id as boardWriter, enroll_start_date as startDate,
			             support_state as boardState, member_phone as memberPhone, member_email as memberEmail from support left join member on(member_id=support_id)
			             )r where boardTitle like '%'||#{title}||'%'
			             <if test='req.equals("wait")'>
					     	and boardState=0
					     </if>
					     <if test='req.equals("complete")'>
					    	and boardState!=0
					     </if>
					     <if test='sort.equals("date")'>
					     	order by startDate
					     </if>
					     <if test='sort.equals("title")'>
					     	order by boardTitle
					     </if>
			         )rr
			    )
			where boardNo between #{start} and #{end}
		</if>

		<if test='type.equals("regular")'>
			select * from 
			    (select ROWNUM as boardNo, rr.* from
			        (select  r.* from
			            (select regular_no as boardKey,'정기후원' as groupName, regular_title as boardTitle, regular_id as boardWriter, regular_start_date as startDate,
			             regular_state as boardState, member_phone as memberPhone, member_email as memberEmail from regular left join member on(member_id=regular_id)
			             )r where boardTitle like '%'||#{title}||'%'
			             <if test='req.equals("wait")'>
					     	and boardState=0
					     </if>
					     <if test='req.equals("complete")'>
					    	and boardState!=0
					     </if>
					     <if test='sort.equals("date")'>
					     	order by startDate
					     </if>
					     <if test='sort.equals("title")'>
					     	order by boardTitle
					     </if>
			         )rr
			    )
			where boardNo between #{start} and #{end}
		</if>

	</select>
	
	<!-- 글 신청 승인~ -->
	<update id="agreeRequestBoard" parameterType="map">
		update 
		<if test='type.equals("donation")'>
			donation set donation_state=1, donation_start_date=sysdate, donation_end_date=sysdate+7 where donation_no=#{key}
		</if>
		<if test='type.equals("funding")'>
			funding set funding_type=1, funding_start_date=sysdate, funding_end_date=sysdate+7 where funding_no=#{key}
		</if>
		<if test='type.equals("vwork")'>
<<<<<<< HEAD
			vwork set vwork_state=1, vwork_req_date=sysdate where vwork_no=#{key}
=======
			vwork set vwork_state=1, vwork_req_date=sysdate, vwork_dl_date=sysdate+7 where vwork_no=#{key}
>>>>>>> parent of 87b6781... Revert "Merge branch 'ssong-branch' of https://github.com/whddms4321/DonGiveUp into ssong-branch"
		</if>
		<if test='type.equals("support")'>
			support set support_state=1, enroll_start_date=sysdate, enroll_end_date=sysdate+7 where support_no=#{key}
		</if>

		<if test='type.equals("regular")'>
			regular set regular_state=1, regular_start_date=sysdate where regular_no=#{key}
		</if>

	</update>
	<!-- 글 신청 거부! -->
	<update id="negativeRequestBoard" parameterType="map">
		update 
		<if test='type.equals("donation")'>
			donation set donation_state=2, donation_negative=#{content} where donation_no=#{key}
		</if>
		<if test='type.equals("funding")'>
			funding set funding_type=2, funding_negative=#{content} where funding_no=#{key}
		</if>
		<if test='type.equals("vwork")'>
			vwork set vwork_state=2, vwork_negative=#{content} where vwork_no=#{key}
		</if>
		<if test='type.equals("support")'>
			support set support_state=2, support_negative=#{content} where support_no=#{key}
		</if>

		<if test='type.equals("regular")'>
			regular set regular_state=2, regular_negative=#{content} where regular_no=#{key}
		</if>

	</update>
	
	<select id="selectNegativeContent" parameterType="map" resultType="string">
		select
		<if test='type.equals("donation")'>
			donation_negative from donation where donation_no=#{key}
		</if>
		<if test='type.equals("funding")'>
			funding_negative from funding where funding_no=#{key}
		</if>
		<if test='type.equals("vwork")'>
			vwork_negative from vwork where vwork_no=#{key}
		</if>
		<if test='type.equals("support")'>
			support_negative from support where support_no=#{key}
		</if>

		<if test='type.equals("regular")'>
			regular_negative from regular where regular_no=#{key}
		</if>

	</select>
	
	<select id="deadLineSupportListTotalCount" resultType="_int">
		<![CDATA[
			select count(*) from support where support_state=1 and enroll_end_date<=sysdate
		]]>
	</select>
	<select id="deadLineSupportList" parameterType="map" resultType="adminDeadSupport">
		<![CDATA[
			select * from
			    (select ROWNUM as rnum, r.* from
			        (select support_no as supportNo, support_id as supportId, member_phone as memberPhone, member_email as memberEmail, support_name as supportName,
			        enroll_start_date as enrollStartDate, enroll_end_date as enrollEndDate
			        from support left join member on(member_id=support_id)
			        where support_state=1 and enroll_end_date<=sysdate
			        )r
			    )
			where rnum between #{start} and #{end}
		]]>
	</select>
	<delete id="deleteSupport" parameterType="_int">
		delete from support where support_no=#{_parameter}
	</delete>
	
	<select id="selectSupportRequestCompanyTotalCount" parameterType="_int" resultType="_int">
		select count(*) from supportapply where support_no=#{supportNo} and support_apply_state=0
	</select>
	
	<select id="selectSupportRequestCompany" parameterType="map" resultType="adminSupportapply">
		select * from
		    (select ROWNUM as rnum, r.* from
		        (select support_apply_no as supportApplyNo,
					   support_apply_reason as supportApplyReason,
					   support_apply_state as supportApplyState,
					   support_no as supportNo,
					   company_name as supportApplyId
				from supportapply left join member on(support_apply_id=member_id) where support_no=#{supportNo})r) where rnum between #{start} and #{end}
	</select>
	
	<select id="selectApplyId" parameterType="string" resultType="string">
		select member_id from member where company_name=#{_parameter}
	</select>
	<select id="supportAssignToCompany" statementType="CALLABLE" parameterType="map">
		{call pro_supportapply(
			#{supportNo},
			#{applyId}
		)
		}
	</select>
	<update id="supportReUpload" parameterType="_int">
		update support set enroll_start_date=sysdate, enroll_end_date=sysdate+7 where support_no=#{supportNo}
	</update>
	
	<select id="companyEnrollReqTotalCount" resultType="_int">
		select count(*) from member where member_type=0
	</select>
	
	<select id="companyEnrollReq" parameterType="map" resultType="adminMember">
	select * from
	(select ROWNUM as rnum, r.* from
		(select 
			member_id as memberId,
			member_name as memberName,
			member_phone as memberPhone,
			member_addr as memberAddr,
			member_email as memberEmail,
			member_referee as memberReferee,
			member_type as memberType,
			member_enroll_date as memberEnrollDate,
			member_money as memberMoney,
			company_filename as companyFilename,
			company_filepath as companyFilepath,
			chart_filename as chartFilename,
			chart_filepath as chartFilepath,
			company_number as companyNumber,
			company_content as companyContent
		from member where member_type=0)r) where rnum between #{start} and #{end}
	</select>
	
	<update id="enrollCompany" parameterType="map">
		<if test='type.equals("0")'>

			update member set member_type=2, company_name=#{companyName}, member_enroll_date=sysdate where member_id=#{memberId}

		</if>
		<if test='type.equals("1")'>
			update member set member_type=3 where member_id=#{memberId}
		</if>
	</update>
	
	<select id="memberManagementListTotalCount" parameterType="string" resultType="_int">
		<if test='_parameter.equals("nomal")'>
			select count(*) from member where member_type=1 or member_type=4
		</if>
		<if test='_parameter.equals("company")'>
			select count(*) from member where member_type=2 or member_type=5
		</if> 
	</select>
	
	<select id="memberManagementList" parameterType="map" resultType="adminMember">
		select * from
			(select ROWNUM as rnum, r.* from
				(select 
					member_id as memberId,
					member_name as memberName,
					member_phone as memberPhone,
					member_addr as memberAddr,
					member_email as memberEmail,
					member_referee as memberReferee,
					member_type as memberType,
					member_enroll_date as memberEnrollDate,
					member_money as memberMoney,
					company_filename as companyFilename,
					company_filepath as companyFilepath,
					chart_filename as chartFilename,
					chart_filepath as chartFilepath,
					company_number as companyNumber,
					company_content as companyContent,
					company_name as companyName
				from member 
				<if test='type.equals("nomal")'>
					where member_type=1 or member_type=4	
				</if>
				<if test='type.equals("company")'>
					where member_type=2 or member_type=5
				</if>
				)r) where rnum between #{start} and #{end}
	</select>
	
	<update id="memberStopAndRestore" parameterType="map">
		update member set
		<if test='type.equals("nomal")'>
			<if test='kind.equals("stop")'>
				member_type=4
			</if>
			<if test='kind.equals("restore")'>
				member_type=1
			</if>
		</if>
		<if test='type.equals("company")'>
			<if test='kind.equals("stop")'>
				member_type=5
			</if>
			<if test='kind.equals("restore")'>
				member_type=2
			</if>
		</if>
		where member_id=#{memberId}
	</update>
	
	<select id="regularCancelReqTotalCount" parameterType="map" resultType="_int">
			select SUM(cnt) from
		<if test='type.equals("all")'>
		    (select count(*) as cnt from regular_in where regular_in_cancel!=0
		    union all
		    select count(*) as cnt from bank_in where bank_in_type=1 and bank_in_cancel!=0)
		</if>
		<if test='type.equals("req")'>
			(select count(*) as cnt from regular_in where regular_in_cancel=1
		    union all
		    select count(*) as cnt from bank_in where bank_in_type=1 and bank_in_cancel=1)
		</if>
		<if test='type.equals("complete")'>
			(select count(*) as cnt from regular_in where regular_in_cancel=2
		    union all
		    select count(*) as cnt from bank_in where bank_in_type=1 and bank_in_cancel=2)
		</if>
	</select>
	
	<select id="regularCancelReq" parameterType="map" resultType="adminRegularIn">
		
			select * from
			    (select ROWNUM as rNum, r.*, member_phone as memberPhone, member_email as memberEmail from
			        (select regular_in_no as regularInNo, '정기기부' as groupName, regular_in_id as regularId, regular_in_money as regularInMoney, regular_in_pay_num as  regularInPayNum,
			                regular_no as regularNo, regular_in_cancel as regularInCancel from regular_in left join regular using(regular_id)
			             union all
			         select bank_in_no, '저금통', bank_in_id, bank_in_money, bank_in_pay_num, bank_no, bank_in_cancel from bank_in left join bank using(bank_no) where bank_in_type=1)
			     r  left join member on(regularId=member_id) where
			     <if test='type.equals("all")'> 
			     	regularInCancel!=0)
			     </if>
			     <if test='type.equals("req")'> 
			     	regularInCancel=1)
			     </if>
			     <if test='type.equals("complete")'> 
			     	regularInCancel=2)
			     </if>
			where rNum between #{start} and #{end}
		
	</select>
	<update id="updateRegular" parameterType="map">
		update
		<if test='type.equals("regular")'>

			regular_in set regular_in_cancel=2, regular_in_end_date=sysdate where regular_in_no=#{regularNo}
		</if>
		<if test='type.equals("bank")'>
			bank_in set bank_in_cancel=2, bank_in_end_date=sysdate where bank_in_no=#{regularNo}
		</if>
	</update>
	
	<select id="dashboardAllBoardCount" resultType="_int">
		 select SUM(cnt) from
			(select count(*) as cnt from donation
			union all
			select count(*) from funding
			union all
			select count(*) from vwork
			union all
			select count(*) from support)
	</select>
	<select id="dashboardAllCompanyCompleteCount" resultType="_int">
		select count(*) from member where member_type=2 or member_type=5
	</select>
	<select id="dashboardAllCompanyReqCount" resultType="_int">
		select count(*) from member where member_type=0
	</select>
	
	<select id="dashboardAllMemberCount" resultType="_int">
		select count(*) from member where member_type=1 or member_type=4
	</select>
	
	<select id="allDonationCount" resultType="_int">
		select count(*) from donation
	</select>
	<select id="allFundingCount" resultType="_int">
		select count(*) from funding
	</select>
	<select id="allSupportCount" resultType="_int">
		select count(*) from support
	</select>
	<select id="allVworkCount" resultType="_int">
		select count(*) from vwork
	</select>
	<select id="allRegularCount" resultType="_int">
		select count(*) from regular
	</select>
	
	<select id="donationComplete" resultType="_int">
		select count(*) from donation where donation_state=1
	</select>
	<select id="donationReq" resultType="_int">
		select count(*) from donation where donation_state=0
	</select>
	<select id="donationNegative" resultType="_int">
		select count(*) from donation where donation_state=2
	</select>
	
	<select id="fundingComplete" resultType="_int">
		select count(*) from funding where funding_type=2
	</select>
	<select id="fundingReq" resultType="_int">
		select count(*) from funding where funding_type=0
	</select>
	<select id="fundingNegative" resultType="_int">
		select count(*) from funding where funding_type=1
	</select>
	
	<select id="supportComplete" resultType="_int">
		select count(*) from support where support_state=1 or support_state=3
	</select>
	<select id="supportReq" resultType="_int">
		select count(*) from support where support_state=0
	</select>
	<select id="supportNegative" resultType="_int">
		select count(*) from support where support_state=2
	</select>
	
	<select id="vworkComplete" resultType="_int">
		select count(*) from vwork where vwork_state=1
	</select>
	<select id="vworkReq" resultType="_int">
		select count(*) from vwork where vwork_state=0
	</select>
	<select id="vworkNegative" resultType="_int">
		select count(*) from vwork where vwork_state=2
	</select>
	
	<select id="regularComplete" resultType="_int">
		select count(*) from regular where regular_state=1
	</select>
	<select id="regularReq" resultType="_int">
		select count(*) from regular where regular_state=0
	</select>
	<select id="regularNegative" resultType="_int">
		select count(*) from regular where regular_state=2
	</select>

</mapper>
